
async function IPFS_need() { if(typeof 'IPFS' !== 'object') await LOADS_promice(['js/IPFS.js','js/ipfs.js']); } // –ì—Ä—É–∑–∏–º IPFS

G6={
    answer(ids,opt) {
	clean('ziparch');
console.log(ids,opt);
	UPLOAD.win(ids,opt);
    },

    backupAcc: async function(acc_id) {
	const seed = DOT.accs.find(a => a.acc === acc_id).seed;
	ohelpc('Backup',`Backup secret`,
	    `<div class='r' onclick="cpbuf(this.innerHTML.replace(/<[^>]+>/g,''))">
	    <b>Account: </b> <tt>${acc_id}</tt>`
	    + ( seed ? `<hr><b>Seed:</b> <tt>${seed}</tt>`:'' )
	    +`<hr><b>Private:</b><pre>` + f5_read(`PGP_private_${acc_id}`)+'</pre>'
	    +`<hr><b>Public:</b><pre>` + f5_read(`PGP_public_${acc_id}`)+'</pre>'
	    +`</div>`
	);
    },

    delAcc: async function(acc_id) {
	if(!confirm('Delete account?')) return;
	salert('TODO',200);
	// Del Identity
        var tx = DOT.nodes[DOT.CUR].api.tx.identity.clearIdentity();
	var trans_hash = await G6.tx(tx,acc_id);
	if(!trans_hash) log.err('IDENTITY clear: error');
	else log.ok('IDENTITY clear: '+ G6.toHex(trans_hash));

	// Revoke key
        tx = DOT.nodes[DOT.CUR].api.tx.postman.revokeKey();
	trans_hash = await G6.tx(tx,acc_id);
	if(!trans_hash) log.err('Key revoke: error');
	else log.ok('Key revoked: '+ G6.toHex(trans_hash));
    },

    www_Friends: async function(acc_id,act) {
	if(act=='del') {
	    UPLOAD.friends = UPLOAD.friends.filter(item => item !== acc_id);
	} else {
	    if(UPLOAD.friends.includes(acc_id)) return;
    	    UPLOAD.friends.push(acc_id);
	}
        var o=''; for(var x of UPLOAD.friends) {
            o += `<div style="display:flex; align-items:center; gap:10px;">`
		+ await G6.www_acc({ acc: x })
		+ `<div class="mv" onclick="G6.www_Friends('${x}','del')">‚ùå</div>`
		+`</div>`;
        }
        dom('freindZone',o);
    },

    www_changeAcc: async function() {
        var o = `<div><b>Select account</b></div>`;
        for(var x of DOT.accs) o+= `<div style="display:flex; align-items:center; gap:10px;">
<div class='mv0' onclick="G6.delAcc('${x.acc}')">‚ùå</div>
<div onclick="G6.selectAcc('${x.acc}');clean('changeacc');">` + await G6.www_acc(x) +`</div>
<div class='mv0' onclick="G6.backupAcc('${x.acc}')">üíæ</div>
</div>`;

	ohelpc('changeacc','Change Acc '+h(DOT.current_acc.name), o +`<input type="button" onclick="clean('changeacc'); G6.newAcc();" value="Create new">`);
    },

    www_acc: async function(r) {
	    if(!r.info) r.info = await G6.getIdentity(r.acc) || {};
            if(!r.name || r.name=='AutoCreated') r.name = '';


	    r.about = r.public_hash
		? `<a href='${IPFS.hex2url(r.public_hash)}' target='_blank' onclick="IPFS.view_url(this.href,'','txt'); return false;">${h(r.acc)}</a></div>`
		: h(r.acc)
	    ;

	    r.head = h( r.info.display || r.name || r.wallet || '' );
	    // if(r.wallet && r.wallet != 'localStorage') r.head = `<span class='br'>${h(r.wallet)}</span> ${r.head}`;
	    if(r.info?.email) r.head = `${r.head} <a href='mailto:${h(r.info.email)}'>${h(r.info.email)}</a>`;

            return `<div class="acc_card">
			<div>${G6.identicon(r.acc,30)}</div>
		        <div class="acc_content">
		            <div class="acc_title">${r.head}</div>
		            <div class="acc_id">${r.about}</div>
		        </div>
		</div>`;
    },

    identicon: function(acc,size) {
	if(!size) size=24;
	return `<div style='display:inline-block' class='mv0' onclick="G6.www_getInfo('${acc}')">${DOT.identicon_render(acc,size)}</div>`;
    },

    www_getInfo: async function(acc_id) {
	const opt = await G6.getIdentity(acc_id);
	if(!opt) return salert('no info',300);
	dier(opt);
    },

    getIdentity: async function(acc_id) {
	try {
	    if(!acc_id) acc_id = DOT.current_acc.acc;
	    ajaxon();
	    var r = await DOT.nodes[DOT.CUR].api.query.identity.identityOf(acc_id);
	    ajaxoff();
	    if(!r.isSome) return null;
    	    r = r.unwrap().toHuman()[0].info;
	    const opt={};
	    for(var name in r) {
		var s = r[name];
		if(typeof s === 'string') s=G6.raw(s);
		else if(typeof s.Raw === "string") s=G6.raw(s.Raw);
		else if(typeof s.length !== "undefined") {
		    s.forEach(x=>{
			opt[name+'_'+G6.raw(x[0])] = G6.raw(x[1]);
		    });
		    continue;
		}
		if(s && s!=="None") opt[name]=s;
	    }
	    console.log(opt);
    	    return opt;
	} catch(er) {
	    console.error(er);
	    ajaxoff();
	    return false;
	}
    },

    len: function(s) {
	return new TextEncoder().encode(s).length;
    },

    trimto: function(str, maxLength) {
        const encoder = new TextEncoder();
        const decoder = new TextDecoder();
        let encoded = encoder.encode(str);
        if (encoded.length > maxLength) encoded = encoded.slice(0, maxLength);
        return decoder.decode(encoded);
    },

    raw(s) {
	if(typeof s.Raw === "string") s=s.Raw;
	if( !(/^0x[0-9a-f]+$/i).test(s) ) return s;
        s = s.startsWith('0x') ? s.slice(2) : s;
        s = new Uint8Array(s.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
        const decoder = new TextDecoder('utf-8');
	return decoder.decode(s);
    },


    www_identity_form: function(opt) {
	return new Promise(function(resolve, reject) {
	        ohelpc('setidentity','Identity Form',`
<form id="identityForm">
    <h2>Required</h2>
    <div>Name: <input type="text" name="display" maxlength="32" required></div>
    <h2>Optional</h2>
    <div>Email: <input type="email" name="email" maxlength="32"></div>
    <div>Address: <input type="text" name="address" maxlength="32"></div>
    <div>Mobile: <input type="tel" name="telephoneNumber" maxlength="16"></div>
    <div>Bio: <input type="text" name="bio" maxlength="32"></div>
    <div>Website: <input type="url" name="website" maxlength="32"></div>
    <div>Telegram: <input type="text" name="telegram" maxlength="32"></div>
    <div>Discord: <input type="text" name="discord" maxlength="32"></div>
    <div>LinkedIn: <input type="text" name="linkedin" maxlength="32"></div>
    <div>Instagram: <input type="text" name="instagram" maxlength="32"></div>
    <div>Medium: <input type="text" name="medium" maxlength="32"></div>
    <div>YouTube: <input type="text" name="youtube" maxlength="32"></div>
    <div>GitHub: <input type="text" name="git" maxlength="32"></div>
    <div>Mastodon: <input type="text" name="mastodon" maxlength="32"></div>
    <button type="submit">Submit</button>
</form>`);
	    var q=dom('setidentity');
	    // —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
	    if(opt) for(let i in opt) {
		const e = q.querySelector(`input[name='${i}']`);
		if(e) e.value = opt[i];
	    }

	    // –Ω–µ –¥–∞–≤–∞—Ç—å –ø—Ä–µ–≤—ã—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
	    q.querySelectorAll('input').forEach(e => {
	        e.addEventListener('input', event => {
	            const maxLength = 1*e.getAttribute('maxlength');
	            if(G6.len(e.value) > maxLength) e.value = G6.trimto(e.value, maxLength);
		});
	    });

	    q.querySelector("button").addEventListener('click', (event,x) => {
		clean(q);
		const r={};
		q.querySelectorAll(`input`).forEach(e => r[e.name]=e.value.trim() );
		if(!r.display) return salert('Please enter Name',1000);
        	resolve(r);
	    });
	});
    },

    www_identity: async function(acc_id) {
	if(!acc_id) DOT.current_acc.acc;
	var opt = await G6.getIdentity(acc_id) || {};
	opt = await G6.www_identity_form(opt);
	console.log(opt);
	G6.setIdentity(acc_id,opt);
    },

    tx: async function(tx,acc_id) {
	if(!acc_id) acc_id = DOT.current_acc.acc;
	const acc = DOT.accs.find(a => a.acc === acc_id);
        var trans_hash = false;
        if(acc.pair) { // –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª–µ–π
		trans_hash = await tx.signAndSend(acc.pair);
        } else { // –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö
		const injector = await polkadotExtensionDapp.web3FromAddress(acc.acc);
	        trans_hash = await tx.signAndSend(acc.acc, { signer: injector.signer });
        }
	return trans_hash;
    },

    setIdentity: async function(acc_id,opt) {
	if(!opt || !opt.display) return false;

	const identityInfo={}; for(let i in opt) identityInfo[i]={Raw:opt[i]};
	console.log(identityInfo);

        const tx = DOT.nodes[DOT.CUR].api.tx.identity.setIdentity(identityInfo);
	const trans_hash = await G6.tx(tx,acc_id);

	if(!trans_hash) log.err('IDENTITY save: error');
	else log.ok('IDENTITY: '+ G6.toHex(trans_hash));
    },

    toHex: function(data) {
	if(typeof data.toHex === 'function') return data.toHex();
        return '0x'+Array.from(data).map(byte => byte.toString(16).padStart(2, '0')).join('');
    },

    sleep: async function(ms) {
	    return new Promise(resolve => setTimeout(resolve, ms));
    },

    askAlice: async function(acc, min) {
        // ============= top up from Alice ==================
	const N = DOT.nodes[DOT.CUR];
	const old = await G6.balance(acc);
	DOT.Talert("Top up "+acc+" for "+DOT.indot(min,1));
	var keyring = new polkadotKeyring.Keyring({ type: 'sr25519' });
	if(!DOT.alice) DOT.alice = keyring.addFromSeed(polkadotUtil.hexToU8a("0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a"));
	const hash = await N.api.tx.balances.transferKeepAlive(acc, min).signAndSend(DOT.alice);
    	DOT.Talert('Transaction sent with hash '+hash);
	var balance = BigInt(0);
	while( BigInt(balance) < BigInt(old)+BigInt(min) ) {
	    log('waiting...');
	    await G6.sleep(1000);
	    balance = await G6.balance(acc);
	}
	return balance;
    },

    balance: async function(acc){
	log.set(`Balance for ${acc}`);
	const balance = await DOT.Balance(acc) || 0;
	log.ok(`Balance: ${balance}`);
	return balance;
    },

    connect: async function(){
	const N = DOT.nodes[DOT.CUR];
        log(`Connecting: ${N.rpc_url}`);
        await DOT.connect(undefined, 5000);

        if( !N.api ) {
	    log.err(`Failed`);
	    return false;
	}

	log.ok(`Connected: ${N.rpc_url} Get info`);

	var x;
            try { // decimals, name, symbol
                x = await N.api.rpc.system.properties();
                x = x.toHuman();
                N.decimals = DOT.intHuman(x.tokenDecimals[0]);
                N.symbol = x.tokenSymbol[0];
                N.ss58 = 1*(x.ss58Format); // –µ—Å–ª–∏ null, —Ç–æ –∏ –±—É–¥–µ—Ç 0
            } catch(e){}

	x='decimals'; log.ok(`${x}: ${N[x]}`);
	x='symbol'; log.ok(`${x}: ${N[x]}`);
	x='ss58'; log.ok(`${x}: ${N[x]}`);

            try { // deposit
                N.deposit = DOT.intHuman( await N.api.consts.balances.existentialDeposit );
            } catch(e){}

	x='deposit'; log.ok(`${x}: ${N[x]}`);
	return true;
    },

    load_js: async function() {
	await LOADS_promice("DOT.js");
        await LOADS_promice("js/inter.css"); LOADES['https://rsms.me/inter/inter.css']=1; window.DOTLOADES=LOADES;

        DOT.cx.order_id = "0";
        DOT.cx.total = "1";
        DOT.cx.name = 'TEST';
        DOT.cx.ajax_url = mpers("https://shop-js.zymologia.fi/{action}",{action:'kalatori'});
        DOT.cx.mainjs = "js/";
        DOT.cx.currency = "DOT"; // SHOP_SET.CUR; // DOT
        DOT.cx.currences = "DOTL"; // SHOP_SET.CUR_ALLOWED; // DOTL USDC USDT
        DOT.onpaid = function(json,info) { salert('Paid success!',2000); } // –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç–≤–∏–µ

         await DOT.LOADS_promice([
            DOT.cx.mainjs+'bundle-polkadot-util.js',
            DOT.cx.mainjs+'bundle-polkadot-util-crypto.js',
            DOT.cx.mainjs+'bundle-polkadot-extension-dapp.js',
            DOT.cx.mainjs+'bundle-polkadot-types.js',
            DOT.cx.mainjs+'bundle-polkadot-api.js',
            DOT.cx.mainjs+'bundle-polkadot-keyring.js', // west
	],1);

	DOT.Talert=function(s){log(s,'blue');};
	DOT.error=log.err;

	DOT.CUR = 'G6';
	DOT.nodes[DOT.CUR] = {
	    rpc_url: 'wss://node-g6.lleo.me', // 'ws://127.0.0.1:9949',
	};

	return DOT.nodes[DOT.CUR];
    },


    selectAcc: async function(acc_id) {
	// –Ω–∞—à–ª–∏, –æ —á–µ–º —Ä–µ—á—å
	var acc = DOT.accs.find(x => x.acc === acc_id);
	if(!acc) {
	    console.log('Unknown acc_id:', acc_id, DOT.accs, DOT.nodes.G6.ss58);
	    acc = DOT.accs[0];
	    acc_id = acc.acc;
	}
	// –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ–¥—Ç—è–Ω—É–ª–∏ –±–∞–ª–∞–Ω—Å
	await G6.topup(acc);
	// –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –µ—Å—Ç—å –ª–∏ info
        if(!acc.info) acc.info = await G6.getIdentity(acc_id) || {};
	// –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –µ—Å—Ç—å –ª–∏ –∏–º—è
	if(!acc.info.display) {
	    // –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ñ–æ—Ä–º—É –∏ –ø—Ä–æ–ø–∏—Å–∞–ª–∏ –∏–º—è
	    await G6.www_identity(acc_id);
	    // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø—Ä–æ–ø–∏—à–µ—Ç—Å—è
	    while(
		! (acc.info = await G6.getIdentity(acc_id))
		|| !acc?.info?.display
	    ) {
		log('waiting...');
		await G6.sleep(1000);
	    }
	}
	// –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–∫
	acc.pgp_private = f5_read(`PGP_private_${acc_id}`,'');
	acc.pgp_public = f5_read(`PGP_public_${acc_id}`,'');
	if(!acc.pgp_private || !acc.pgp_public) {
	    salert('Create PGP keys',1000);
            log.ok('Create new PGP-keys');
            const newkey = await PGP.create();
            f5_save(`PGP_public_${acc_id}`, acc.pgp_public = newkey.publicKey );
            f5_save(`PGP_private_${acc_id}`, acc.pgp_private = newkey.privateKey );
	}
	// –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ –ø—É–±–ª–∏—á–Ω–∏–∫
        const x = await G6.read(acc.acc);
        if(x != acc.pgp_public) await G6.save(acc.pgp_public,acc);
	// –∏ –≤–æ—Ç —Ç–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–ª–∏
        DOT.current_acc = acc;
	// –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤—ã–±–æ—Ä
	f5_save('current_acc',acc_id);
	// –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∏ –≤ —É–≥–ª—É —Å—Ç—Ä–∞–Ω–∏—á–∫–∏
	dom('my_current_account', await G6.www_acc(acc) );
    },

    topup: async function(acc) { // –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–æ–¥—Ç—è–Ω—É–ª–∏ –±–∞–ª–∞–Ω—Å
	const N = DOT.nodes[DOT.CUR];
	// –ü—Ä–æ—á–ª–∏ –±–∞–ª–∞–Ω—Å
	acc.balance = await G6.balance(acc.acc);
	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–Ω–µ–≥ - –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –ê–ª–∏—Å—ã
	var min = BigInt(N.deposit*2000);
	if(BigInt(acc.balance) < min/BigInt(2)) acc.balance = await G6.askAlice(acc.acc, min);
    },

    // –ò—â–µ–º –≤ –ø–∞–º—è—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏
    get_pgp_keys: function(acc_id) {
	var r = f5_read(`PGP_keys_${acc_id}`,'');
	try { r = JSON.parse(r); } catch(er) { r={}; }
	return r || false;
    },

    newAcc: async function() {
	// —Å–æ–∑–¥–∞–ª–∏ seed
	const seed = polkadotUtilCrypto.mnemonicGenerate();
	log.set('New seed: '+seed);

	ohelpc('saveseed','Save seed',`
Please save your seed:

<div style="padding:20px; border: 1px solid #ccc; border-radius:20px;font-size:16px;">
    <span class='mv' onclick="cpbuf('${seed}')">üìã</span> ${seed}
</div>
`);
	// —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
	const acc = await G6.restoreAcc(seed);
        if(!acc) return false;
	// –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º, –∑–∞–∫–ø–æ–º–∏–Ω–∞–µ–º
	DOT.accs.push(acc);
        DOT.seeds.push(seed);
        f5_save('G6.seed',JSON.stringify(DOT.seeds));
	// –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ (–∏ —Ç–∞–º –±–∞–ª–∞–Ω—Å –∏ –∫–ª—é—á–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç)
	await G6.selectAcc(acc.acc);
    },

    restoreAcc: async function(seed) {
	await polkadotUtilCrypto.cryptoWaitReady();
	const r={};
	if(!seed) return false;
	r.seed = seed;
	// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
	try {
	    r.miniSecret = await polkadotUtilCrypto.mnemonicToMiniSecret(seed);
	    G6.m = r.miniSecret;
	    r.miniSecretHex = G6.toHex(r.miniSecret);
	} catch(er) {
	    log.err('Error seed: '+er);
	    return false;
	}
	    log.ok('Private key: '+r.miniSecretHex );
	// –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Keyring
	r.keyring = await new polkadotKeyring.Keyring({ type: 'sr25519' });
	r.pair = await r.keyring.addFromSeed(r.miniSecret);
	r.public = G6.toHex(r.pair.publicKey);
	r.acc = DOT.west(r.pair.address);
	    log('Public Key: '+ r.public);
	    log('Address: '+ r.acc);
	    log.bin(`<div>${G6.identicon(r.acc,24)}</div>`);
	return r;
    },

    read: async function(acc_id) {
	    log.set(`Read Key for ${acc_id}`);
	    const hash = await G6.read_CHAIN(acc_id);
	    if(!hash) return hash;
	    return await G6.read_IPFS( hash ); // public = IPFS(hash = CHAIN(acc))
    },

    read_CHAIN: async function(acc_id) { // hash = CHAIN(acc)
	    const N = DOT.nodes[DOT.CUR];
	    log.set(`CHAIN: reading hash for ${acc_id}`);
	    const key = await N.api.query.postman.keys(acc_id);
	    if(key.isEmpty || G6.toHex(key) === '0x') {
		log.err("CHAIN: hash not found");
		return '';
	    }
	    log.ok('CHAIN: Hash '+ G6.toHex(key));
	    return G6.toHex(key);
    },


    read_CHAIN_ALL: async function() { // hash = CHAIN(acc)
	    const N = DOT.nodes[DOT.CUR];
	    log.set(`CHAIN: reading ALL hashes`);
	    const keys = await N.api.query.postman.keys.entries();
	    // console.log('keys',keys);
	    // G6.K=keys;
	    // var r=keys.map(x=>{x[0].toHuman():x[1].toHuman()});
	    const r={}; keys.forEach(x => {
		const key = x[0].toHuman();
		const value = x[1].toHuman().public;
		r[key] = value;
	    });
	    console.log('r',r);
	    return r;
    },


    read_IPFS: async function(hash){ // public = IPFS(hash)
	    if(!hash) {
		log.err(`IPFS: Empty hash`);
		return null;
	    }
	    await IPFS_need();
	    log.set(`IPFS: reading Publik with hash ${hash}`);
	    const url = IPFS.hex2url(hash);
	    log.bin(`<br>IPFS: <a href='${url}' target='_blank'>${url}</a>`);
            const response = await fetch(url);
	    if(!response.ok) {
		log.err(`IPFS error: ${response.status}`);
		return false;
	    }
    	    const public = await response.text(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
	    log.ok(`Public key PGP: ${log.key(public)}`);
	    return public;
    },

    save: async function(public, acc) {
	    log.set(`Save Key for ${acc.acc}`);
	    return await G6.save_CHAIN( await G6.save_IPFS(public, acc.acc), acc ); // CHAIN ( hash = public -> IPFS )
    },

    save_IPFS: async function(public, acc) { // hash = public -> IPFS
	    log.set(`IPFS: save Public`);
	    await IPFS_need();
	    const cid = await IPFS.save(public,{type:"text/plain",name:acc+".public"});
	    if(!cid) {
		log.err('IPFS: Error cid');
		return false;
	    }
	    const hash = IPFS.cid2hex(cid);
	    if(!hash) {
		log.err('IPFS: Error hash');
		return null;
	    }
	    log.ok(`IPFS hash: ${hash}`);
	    return hash;
    },

    save_CHAIN: async function(hash, acc) { // hash -> CHAIN
	    if(!hash) {
		log.err(`CHAIN: Empty hash`);
		return null;
	    }
	    const N = DOT.nodes[DOT.CUR];
	    log.set(`CHAIN: save hash for ${acc.acc}`);

	    console.log('acc',acc);

	    const tx = N.api.tx.postman.publishKey(hash);
	    var trans_hash = false;
	    if(acc.pair) { // –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª–µ–π
		trans_hash = await tx.signAndSend(acc.pair);
	    } else { // –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö
		const injector = await polkadotExtensionDapp.web3FromAddress(acc.acc);
	        trans_hash = await tx.signAndSend(acc.acc, { signer: injector.signer });
	    }

	    if(!trans_hash) log.err('CHAIN save: error');
	    else log.ok('CHAIN: '+ G6.toHex(trans_hash));

	    while( await G6.read_CHAIN(acc.acc) != hash ) {
		log('waiting...');
		await G6.sleep(1000);
	    }

	    return G6.toHex(trans_hash);
    },

};


log=function(s,color){
    const e=dom('.log_console');
    e.innerHTML = e.innerHTML + "<br>" + (color ? `<font color='${color}'>${h(s).replace(/\n/g,'<br>')}</font>` : h(s));
    e.scrollTo({ top: e.scrollHeight, behavior: 'smooth' });
};

log.bin=function(s){
    const e=dom('.log_console');
    e.innerHTML = e.innerHTML + s;
    e.scrollTo({ top: e.scrollHeight, behavior: 'smooth' });
};


log.set=function(s) { log(s,'orange'); }
log.ok=function(s) { log(s,'green'); }
log.err=function(s) { log(s,'red'); }
log.key=function(s) {
        if(PGP.test_public(s)) return "[OK: PGP PUBLIC KEY]";
        if(PGP.test_private(s)) return "[OK: PGP PRIVATE KEY]";
	return "error";
};

ZIP = {
    need: async function(){ if(typeof 'JSZip' !== 'object') await LOADS_promice('js/jszip.min.js'); },

    zip: {},

    unzip: async function(—Åontent) {
	await IPFS_need();
	await ZIP.need();
	try {
	    const zipData = await new JSZip().loadAsync(—Åontent);
	    const r = [];
	    for(const [fileName, file] of Object.entries(zipData.files)) {
                if(file.dir) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏
		const content = await file.async( name.toLowerCase().endsWith('.txt') ? "text" : "uint8array" );
		const type = IPFS.name2mime(fileName);
            	r.push({
		    name: fileName,
		    date: file.date,
		    content: content,
		    type: type,
		    // url: URL.createObjectURL(new Blob([content], { type: type })),
		    size: content.length,
		});
    	    }
	    return r;
	} catch(er) { console.error("ZIP unzip error: "+er); }
    },

    zip_files: async function(files) {
	await ZIP.need();
	const zip = new JSZip();
	for(const file of files) {
    	    const content = await file.arrayBuffer(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    	    zip.file(file.name, content); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
	}
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ZIP-—Ñ–∞–π–ª
	return await zip.generateAsync({ type: "blob" });
    },
};


PGP = {
    need: async function(){ if(typeof 'openpgp' !== 'object') await LOADS_promice('js/openpgp.min.js'); },

    // Create new key pair: { privateKey, publicKey }
    create: async function() {
	await PGP.need();
	try {
    	    return await openpgp.generateKey({ userIDs: [{ name: '', email: '' }], curve: 'ed25519' });
	} catch(er) { console.error("PGP.create error: "+er); }
    },


    id: async function(key,all) { // key to id
	    await PGP.need();
	    var x = PGP.test_public(key);
	    if(x) x = await openpgp.readKey({ armoredKey: x });
	    else {
		x = PGP.test_private(key);
		x = await openpgp.readPrivateKey({ armoredKey: x });
	    }
	    if(!x) return '';

	    x = x.getKeys().map(k => k.getKeyID().toHex());
	    if(all) return x;
	    return x[1]?x[1]:x[0];
    },

    info: async function(content) {
	await PGP.need();
	const r={};
	try {
	    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ
    	    if(typeof(content)=='string') content = await openpgp.readMessage({ armoredMessage: content });

	    console.log('content',content);
	    UPLOAD.content = content;

	    // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ª–∏
	    r.encrypted = content.getEncryptionKeyIDs().length;
	    if(r.encrypted) {
		console.log("Encrypted: "+r.encrypted);
		r.encryptedKeys = content.getEncryptionKeyIDs().map(keyId => keyId.toHex());
		console.log("getEncryptionKeyIDs: ", content.getEncryptionKeyIDs());
		console.log("Encrypted for: ", r.encryptedKeys);

		// –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
		var my_private = f5_read('PGP_private_'+DOT.current_acc.acc,'');
		if(my_private) {
            	    var privateKey = await openpgp.readPrivateKey({ armoredKey: my_private });
		    if(privateKey.keyPacket?.isEncrypted) { // –ö–ª—é—á –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
			var password = await PGP.get_password(my_private);
		        privateKey = await openpgp.decryptKey({ privateKey: privateKey, passphrase: password });
            	    }
		    const decryptedMessage = await openpgp.decrypt({ message: content, decryptionKeys: [privateKey],format: 'binary' });
		    console.log('decryptedMessage',decryptedMessage);
		//    content = await openpgp.readMessage({ binaryMessage: new Uint8Array(decryptedMessage.data) });
		    console.log('content2: ',content);
		}

	    } else {
		console.log("No encrypt");
	    }

	    r.signed = content.getSigningKeyIDs().length;
	    if(r.signed) {
		console.log("Signed: " + r.signed);
		r.signedKeys = content.getSigningKeyIDs().map(sig => sig.toHex());
		console.log("Signed for:", r.signedKeys);
	    } else {
		console.log("No sign");
	    }
	} catch(er) { console.error("PGP.info error: "+er); }
	return r;
    },


    // –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    // await PGP.encrypt(fileContent, {public: key, private: key, password }); // {public: [key1, key2, ...]});
    encrypt: async function(message, opt) {
	await PGP.need();
	try {
	    message = await openpgp.createMessage({ binary: new Uint8Array(message) }); // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

	    const format = opt.format || 'armored'; // 'binary' // –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞

	    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ - –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å
    	    if(opt.private) {
        	if(typeof opt.private === 'string') opt.private = [opt.private];
		opt.private = [...new Set(opt.private)]; // —É–¥–∞–ª–∏–º –¥—É–±–ª–∏
        	opt.sign = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–µ–π –ø–æ–¥–ø–∏—Å–∏
        	for(let i=0; i<opt.private.length; i++) {
            	    var key = await openpgp.readPrivateKey({ armoredKey: opt.private[i] });
		    if(key.keyPacket?.isEncrypted) { // –ö–ª—é—á –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
			opt.password = opt.password || await PGP.get_password(opt.private[i]);
			key = await openpgp.decryptKey({privateKey:key,passphrase:opt.password});
            	    }
            	    opt.sign.push(key);
        	}
    	    }


	    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ - —à–∏—Ñ—Ä–æ–≤–∞—Ç—å
	    if(opt.public) {
    		if(typeof opt.public == 'string') opt.public = [opt.public];
		opt.public = [...new Set(opt.public)]; // —É–¥–∞–ª–∏–º –¥—É–±–ª–∏
    		opt.enc = [];
		for(let i=0;i<opt.public.length;i++) {
		    const key = await openpgp.readKey({ armoredKey: opt.public[i] })
		    opt.enc.push( key );
		}
	    }

	    // –°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	    if(opt.sign) {
		message = await openpgp.sign({
		    message: message,
		    signingKeys: opt.sign,
		    format: opt.enc ? "binary" : format, // –ï—Å–ª–∏ –±—É–¥–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º binary
		});
		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç Message
	        if(opt.enc) message = await openpgp.readMessage({ binaryMessage: message }); // –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç // –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º binaryMessage
	    }

	    // –ü–æ—Å–ª–µ —à–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	    if(opt.enc) {
		message = await openpgp.encrypt({
		    message: message,
		    encryptionKeys: opt.enc,
		    format: format, // –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
		});
	    }

	    // https://docs.openpgpjs.org/

	    return message; // await openpgp.encrypt(ara);
	} catch(er) { console.error("PGP.encrypt error: "+er); }
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ PGP —Ñ–∞–π–ª–∞
    decrypt: async function(content,opt) {
	await PGP.need();
	try {
	    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤ –±–∏–Ω–∞—Ä–Ω–æ–µ
    	    if(typeof(content)=='string') content = await openpgp.readMessage({ armoredMessage: content });

	    const ara = {
        	message: content,
    		format: 'binary' // –£–∫–∞–∑—ã–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	    };

	    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ - –Ω–µ—á–µ–≥–æ –∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å
    	    if(typeof opt.private === 'string') opt.private = [opt.private];
    	    ara.decryptionKeys = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–µ–π –ø–æ–¥–ø–∏—Å–∏
    	    for(let i=0; i<opt.private.length; i++) {
            	    var privateKey = await openpgp.readPrivateKey({ armoredKey: opt.private[i] });
		    if(privateKey.keyPacket?.isEncrypted) { // –ö–ª—é—á –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
			opt.password = opt.password || await PGP.get_password(opt.private[i]);
		        privateKey = await openpgp.decryptKey({ privateKey: privateKey, passphrase: opt.password });
            	    }
            	    ara.decryptionKeys.push(privateKey);
    	    }
    	    if(!ara.decryptionKeys.length) throw new Error('Error: no Private keys');

	    const { data: decryptedContent } = await openpgp.decrypt(ara);
	    return new Uint8Array(decryptedContent); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Uint8Array
	} catch(er) {
	    er = 'PGP decrypt error: '+er;
	    console.error(er);
	    return er;
	}
    },

/*
    // –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
    get_password: async function(private) {
	var password = false;
	// –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á, –ø–æ–∏—Å–∫–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
	if( private == f5_read('pgp_private_key','')) password = f5_read('pgp_password',false);
	while(password===false) password = await PGP.www_password();
	return password;
    },


    // –°–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    www_password: function() {
	return new Promise(function(resolve, reject) {
	        ohelpc('pgp_password','Input PGP password',`<input type='text' width='60' class='pgp_password'> <input type='button' value='GO'>`);
	        var q=dom('pgp_password');
	        q.querySelector("input[type='button']").addEventListener('click', (event,x) => {
		    clean(q);
        	    resolve(q.querySelector("input.pgp_password").value);
		});
	});
    },
*/

    test_public: function(key) {
	return PGP.test(key,'-----BEGIN PGP PUBLIC KEY BLOCK-----','-----END PGP PUBLIC KEY BLOCK-----');
    },

    test_private: function(key) {
	return PGP.test(key,'-----BEGIN PGP PRIVATE KEY BLOCK-----','-----END PGP PRIVATE KEY BLOCK-----');
    },

    test: function(key,start,end) {
	if(typeof(key)!=='string') return false;
	key=key.trim();
	if(key.indexOf(start)!=0) return false;
	if( key.indexOf(end) + end.length != key.length ) {
	    console.log(`${end} \n ${key.indexOf(end)} + ${end.length} != ${key.length}`);
	    return false;
	}
	return key;
    },


    www_checkSign: function(url) {
	var e=window.event.target;
	alert(e.value+' '+url);
    },

};


UPLOAD = {

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª PGP
  View: async function(url) {
// alert(1);
	// TODO –ß–¢–û –ó–ê –ï–ë–ê–ù–ê–Ø –°–£–ö–ê
//	console.log(`URL: ${url}`);
//	url = url.replace(/\/bafkr/g,'/bafyb');
//	console.log(`URL: ${url}`);
	// https://ipfs.lleo.me/bafkr4ia6u2mhnfdt5joxs6l7ytqbr2jfhedgzsq3xmrhioqbfotfptgvli
	// https://ipfs.lleo.me/bafyb4ia6u2mhnfdt5joxs6l7ytqbr2jfhedgzsq3xmrhioqbfotfptgvli

    const REPLY = url.split('/').pop();

    try {
        // 1. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
	ajaxon();
	UPLOAD.time = {};
	UPLOAD.time.ms = performance.now();

//          const response = await fetch(url);
//	    if(!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
//    	    const encryptedText = await response.text(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç

	    var encryptedText = '';
            var response = await fetch(url);
	    if(response.ok) encryptedText = await response.text(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç

	    if(!response.ok || encryptedText.substring(0,2) != "# ") {
		url = url.replace(/\/bafkr/g,'/bafyb');
		response = await fetch(url);
		if(response.ok) encryptedText = await response.text(); // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
	    }
	    if(!response.ok || encryptedText.substring(0,2) != "# ") throw new Error(`HTTP error! Status: ${response.status}`);


	UPLOAD.time.load = performance.now()-UPLOAD.time.ms;

	// –ú–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
	const FILE =
		((encryptedText.match(/\# FILE\:\s*(.+)/) || [])[1]?.trim())
		|| ((encryptedText.match(/\# PGP name\:\s*(.+)/) || [])[1]?.trim())
		|| null;
	console.log('FILE: ', FILE);

	const TO =
		((encryptedText.match(/\# TO\:\s*(.+)/) || [])[1]?.trim())
		|| ((encryptedText.match(/\# PGP recipients\:\s*(.+)/) || [])[1]?.trim())
	        || '';
	if(TO) console.log('TO: ['+TO+']');

	const FROM = ((encryptedText.match(/\# FROM\:\s*(.+)/) || [])[1]?.trim()) || '';
	if(FROM) console.log('FROM: ', FROM);

	const FROM_ADDR = ((encryptedText.match(/\# FROM_ADDR\:\s*(.+)/) || [])[1]?.trim()) || '';
	if(FROM_ADDR) console.log('FROM_ADDR: ['+FROM_ADDR+']');

	const DATE = ((encryptedText.match(/\# DATE\:\s*(.+)/) || [])[1]?.trim()) || '';
	if(DATE) console.log('DATE: ', DATE);

	const UNIXTIME = ((encryptedText.match(/\# UNIXTIME\:\s*(.+)/) || [])[1]?.trim()) || '';
	if(UNIXTIME) console.log('UNIXTIME: ', UNIXTIME);

	const signatures = ((encryptedText.match(/\# PGP signatures\:\s*(.+)/) || [])[1]?.trim()) || '';
	if(signatures) console.log('Signaturese:', signatures);

	// 1. –ü—Ä–æ—á–µ—Å—Ç—å –∏–Ω—Ñ–æ
	const info = await PGP.info(encryptedText);
	console.log("info: ", info);



	// 3. –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ñ–∞–π–ª PGP —Å–≤–æ–∏–º –Ω—ã–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
	UPLOAD.time.ms = performance.now();
		const key = f5_read('PGP_private_'+DOT.current_acc.acc,'');
		const decryptedContent = await PGP.decrypt(encryptedText,{private:key});
	UPLOAD.time.decrypt = performance.now()-UPLOAD.time.ms;
	console.log("URL: ",url);
	console.log("ZIP: ",decryptedContent);
	ajaxoff();

	// –ß–∏—Å—Ç–∏–º –º—É—Å–æ—Ä
	if(UPLOAD.zipfiles) UPLOAD.zipfiles.forEach(file => { if(file.url) URL.revokeObjectURL(file.url); }); // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É blob://

	if(typeof(decryptedContent)==='string') { // –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
	    UPLOAD.zipmessage = decryptedContent;
	    UPLOAD.zipfiles = [];
	} else {
	    await IPFS_need();
	    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ ZIP-–∞—Ä—Ö–∏–≤ - –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∞—Ç—å
	    if(!FILE.toLowerCase().endsWith('.zip')) {
    		// 3. –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		IPFS.download(decryptedContent, FILE || 'decrypted_pgp_file');
		return;
	    }
	    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã ZIP
	    UPLOAD.time.ms = performance.now();
		UPLOAD.zipfiles = await ZIP.unzip(decryptedContent);
	    UPLOAD.time.unzip = performance.now()-UPLOAD.time.ms;
	    console.log("FILES: ",UPLOAD.zipfiles);
	    UPLOAD.zipmessage = '';
	}

	var o = `
<style>
    .fn {
        margin-top:3px;
        font-size: 12px;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .fn_namea {
        padding: 1px 10px 1px 10px;
        border: 1px solid #ccc;
        background-color: #eee;
        border-radius: 15px;
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 1px 10px 1px 10px;
	cursor: pointer;
    }

    .fn_name {
        display: inline-block;
        font-size: 12px;
    }

    .typeicon {
        display: inline-block;
        padding: -5px 10px -5px 5px;
        font-size: 18px;
        margin: -5px 0 -5px 0;
    }

    .uploadme {
        display: inline-block;
        font-size: 18px;
    }

    .sigbut {
	font-size:10px;
	border-radius: 999px;
    }

    .pgpid {
	background-color: #ffeddf;
	display: inline-block;
	EEEborder: 1px solid #ccc;
	padding: 0 5px 0 5px;
	font-size:10px;
	border-radius: 999px;
    }

    .messagediv {
	margin:10px 0 10px 0;
        max-height: 300px; /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        overflow-y: auto; /* –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ max-height */
        height: auto; /* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */
        white-space: pre-wrap; /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª—ã */
        word-wrap: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ */
        border: 1px solid #ccc; /* –î–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ */
        padding: 10px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
        box-sizing: border-box; /* –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±—â–µ–π –≤—ã—Å–æ—Ç–µ */
	background-color: #f9f6d5;
	border-radius: 10px;
	font-size: 14px;
    }

    .imgpre {
	max-width: 150px;
	max-height:150px;
    }

</style>
	`;

	o+=`<div class='br'>load: ${UPLOAD.time.load}ms decrypt: ${UPLOAD.time.decrypt}ms unzip: ${UPLOAD.time.unzip}ms</div>`;

	// –ï—Å–ª–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏
	const me_name = h(DOT.current_acc.info.display);
	const me_addr = h(DOT.current_acc.acc);



	if(FROM) o+=`<div class='r'>FROM: `+h(FROM).replace(me_name,`<u>${me_name}</u>`)+`</div>`;
	if(UNIXTIME) {
	    const TO_ARR = TO.split(',').map(x=>`"${h(x.trim())}"`).join(',');
	    const REALDATE = unixtime2str(1*UNIXTIME);
		    o+=` <input type='button' value='ANSWER'     onclick='G6.answer(["${h(FROM_ADDR)}"          ],{FROM_ADDR:"${h(FROM_ADDR)}",FROM:"${h(FROM)}",DATE:"${REALDATE}",TO:[${TO_ARR}],REPLY:"${h(REPLY)}"})'>`
		      +` <input type='button' value='ANSWER ALL' onclick='G6.answer(["${h(FROM_ADDR)}",${TO_ARR}],{FROM_ADDR:"${h(FROM_ADDR)}",FROM:"${h(FROM)}",DATE:"${REALDATE}",TO:[${TO_ARR}],REPLY:"${h(REPLY)}"})'>`;
	}
	if(FROM_ADDR) o+=`<div class='r'>FROM_ADDR: `+h(FROM_ADDR).replace(me_addr,`<u>${me_addr}</u>`)+`</div>`;

	if(DATE) o+=`<div class='r'>DATE HIS: `+h(DATE)+`</div>`;
	if(UNIXTIME) o+=`<div class='r'>DATE MY: `+unixtime2str(1*UNIXTIME)+` (UnixTime: `+h(UNIXTIME)+`)</div>`;

	if(TO) o+=`<div class='r'>TO: `+h(TO).replace(me_name,`<u>${me_name}</u>`)+`</div>`;

	if(info.encryptedKeys) o += `<div class='r'>info.encrypted: ` + info.encryptedKeys.map(id => `<div class='pgpid'>${id}</div>`).join(" ") + `</div>`;

	// –ï—Å–ª–∏ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∏
	if(signatures) {
	    var names = signatures.match(/"([^"]+)"/g).map(name => name.replace(/"/g, ""));
	    o += `<div class='r'>Signatures: `
		    +names.map(name => `<input type='button' class='sigbut' value='${h(name)}' onclick="PGP.www_checkSign('${h(url)}')">`).join(" ")
		    +`</div>`;
	}

	if(info.signedKeys) o += `<div class='r'>info.signed: `+info.signedKeys.map(id => `<div class='pgpid'>${id}</div>`).join(" ")+ `</div>`;


	const message = UPLOAD.zipfiles.find(file => file.name === 'message.txt');
	if(message) {
	    UPLOAD.zipfiles = UPLOAD.zipfiles.filter(file => file.name !== 'message.txt');
	    message.text = new TextDecoder('utf-8').decode(message.content);
	    o+= `<div class='messagediv'>${h(message.text)}</div>`;
	}

	if(UPLOAD.zipfiles.length) o += UPLOAD.zipfiles.map(x => {
	    var content;
	    if(x.type.indexOf('image/')>=0) {
		if(!x.url) x.url = URL.createObjectURL(new Blob([x.content], { type: x.type }));
		content = `<img src='${h(x.url)}' class='imgpre' onclick="UPLOAD.zipfilesView('${h(x.name)}')">`;
	    } else content = `<div class='fn_namea' onclick="UPLOAD.zipfilesView('${h(x.name)}')">
			<div alt='${x.type}' class='typeicon'>${IPFS.typece(x.type)}</div>
		        <div class='fn_name'>${h(x.name)}</div>
		    </div>${x.size}`;

	    return `<div class='fn'>
<div class='uploadme mv0' onclick="UPLOAD.zipfilesDownload('${h(x.name)}')">&#128190;</div>
${content}
</div>`;

	}).join('');

	if(UPLOAD.zipmessage) o+=`<u>Unable decode file<p>${h(UPLOAD.zipmessage)}`;

	G6.MES[REPLY]={
	    FROM: FROM,
	    FROM_ADDR: FROM_ADDR,
	    // REALDATE: REALDATE,
	    TEXT: message.text.substring(0,100),
	};
	f5_save('G6.MES',JSON.stringify(G6.MES));

	ohelpc('ziparch','Archive '+h(name),`<div style='max-width:500px'>${o}</div>`);

    } catch(er) { console.error('Error in View:', er); }
  },

  // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ zip-–∞—Ä—Ö–∏–≤–∞
  zipfilesDownload: function(name) {
	const file = UPLOAD.zipfiles.find(f => f.name === name);
	IPFS.download(file.content,name);
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –∏–∑ zip-–∞—Ä—Ö–∏–≤–∞
  zipfilesView: function(name) {
	const file = UPLOAD.zipfiles.find(f => f.name === name);
	if(!file.url) file.url = URL.createObjectURL(new Blob([file.content], { type: file.type }));
	IPFS.view_url(file.url,name,file.type);
  },

  relist_my: async function(){ // upload file list
    await IPFS_need();
    dom('ipfs-my-list','');
	try { IPFS.myfiles = JSON.parse(f5_read('ipfs_myfiles')); } catch(er) {} // –≤–∫–ª—é—á–∏–º –∫—ç—à
	IPFS.myfiles = IPFS.myfiles || [];
	dom('ipfs-my-list',mpers(`
<table border='0' cellpadding='2' cellspacing='0' id='ipfs-my-list-table'>
{for(myfiles):
<tr hash='{#hash}' content-type='{#type}'>
<td>{i}</td>
<td><i alt='Delete from my' onclick='UPLOAD.DelMy()' class='e_cancel1 mv'></i></td>
<td><i alt='Delete' onclick='IPFS.Del(this)' class='e_cancel mv'></i></td>
<td><a class='r' onclick='return IPFS.View(this)' href='`+IPFS.endpoint+`{#hash}'>{#hash}</a></td>
<td><div>{case(name):
{false:}
{*:{#name}}
}</div><div class='br'>{#type}</div></td>
<td class='r leng'>{#leng}</td>
<td class='br'><a href='https://ipfs.io/ipfs/{#hash}' target='_blank'>ipfs.io</a></td>
</tr>
}
</table>
`,{myfiles:IPFS.myfiles}));

  },

  DelMy: function(hash){
    hash = hash || IPFS.find_tr().getAttribute('hash');
    IPFS.myfiles = IPFS.myfiles.filter(item => item.hash !== hash);
    f5_save('ipfs_myfiles',JSON.stringify(IPFS.myfiles));
    UPLOAD.relist_my();
  },

  AddMy: function(hash){
    IPFS.Type(hash,function(hash,type,leng,name){
	IPFS.myfiles.push({hash:hash,type:type,leng:leng,name:name});
        f5_save('ipfs_myfiles',JSON.stringify(IPFS.myfiles));
        UPLOAD.relist_my();
    });
  },

  copytomy: function(){
    var hash=IPFS.find_tr().getAttribute('hash');
    if(dom('ipfs-my-list-table').querySelector("TR[hash='"+hash+"']")) return;
    UPLOAD.AddMy(hash);
  },

  relist: async function(){ // upload file list
    await IPFS_need();
    dom('ipfs-list','');
    return await IPFS.List({
	    type:"exist",
	    nameonly: 1,
	    table_template: "<table border='0' cellpadding='2' cellspacing='0' id='ipfs-list-table'>{table}</table>",
	    template: `<tr hash='{#hash}'>
<td>{i}</td>
<td><i alt='Delete' onclick='IPFS.Del(this)' class='e_cancel mv'></i></td>
<td><a class='r' onclick='return IPFS.View(this)' href='{#url}'>{#hash}</a></td>
<td><i class='e_help'></i></td>
<td class='r'></td>
<td class='r leng'></td>
<td class='br'><a href='{#ipfsurl}' target='_blank'>ipfs.io</a></td>
<td class='br mv0' onclick='UPLOAD.copytomy()'>&#x2398;</td>
</tr>`
    });
  },



  showhash: function(hash){
    var ee=false;
    dom("ipfs-list-table").querySelectorAll("TR[hash='"+hash+"']").forEach(e=>{ ee=e; e.style.backgroundColor='green';});
    if(ee) ee.scrollIntoView({ behavior: 'smooth', block: 'center' });
  },

  nowdate: function(){
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0'); // –º–µ—Å—è—Ü—ã —Å 0
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  file_ready: async function(files,opt) {
    files = UPLOAD.upfiles;
    // opt = UPLOAD.upfiles_opt;

    try {
	// console.log('FILES:', files);

	// –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ñ–∞–π–ª—ã ZIP
	const zipBlob = await ZIP.zip_files(files);

	// –ü—Ä–∏—Å–≤–æ–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∏–º—è
	const fileName = UPLOAD.nowdate()+'_files.zip';

	var header=
		`# FROM: ${h(DOT.current_acc.info.display)}\n`
	      + `# FROM_ADDR: ${h(DOT.current_acc.acc)}\n`
	      + `# DATE: ${new Date().toLocaleString('en-GB',{timeZoneName:'short'}).replace(',','')}\n`
	      + `# UNIXTIME: ${Math.round(new Date().getTime()/1000)}\n`
	      + `# FILE: ${fileName}\n`;
	    ;

	const ara = {}; // –æ–ø—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

	// –ö–æ–º—É —à–∏—Ñ—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏?
        if(!UPLOAD.friends.length) return false;
	ara.public = [];
	for(var acc_id of UPLOAD.friends) {
	    const pk = PGP.test_public( await G6.read(acc_id) );
	    if(!pk) throw new Error(`Wrong format Public key for "${name}"`);
	    ara.public.push(pk);
	}
	ara.public = [...new Set(ara.public)]; // —É–¥–∞–ª–∏–º –¥—É–±–ª–∏
	header += `# TO: `+ UPLOAD.friends.join(", ")+`\n`;

/*
	// –ö—Ç–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç?
        if(UPLOAD.signatures.length) {
	    ara.private = UPLOAD.signatures.map(name => {
		const pk = PGP.test_private(EXAMPLE_PRIVATE[name]);
		if(!pk) throw new Error(`Wrong format Private key for "${name}"`);
		return pk;
	    });
	    ara.private = [...new Set(ara.private)]; // —É–¥–∞–ª–∏–º –¥—É–±–ª–∏
	    header += `# PGP signatures: `+ UPLOAD.signatures.map(name => `"${name}"`).join(", ")+ `\n`;
	}
*/

        if(ara.public?.length || ara.private?.length) { // –ï—Å–ª–∏ —Ö–æ—Ç—å –∫–æ–º—É-—Ç–æ —à–∏—Ñ—Ä—É–µ–º –∏–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º, —Ç–æ –Ω–∞–º –Ω—É–∂–µ–Ω PGP
	    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ ArrayBuffer
	    const fileContent = await zipBlob.arrayBuffer();
	    // –®–∏—Ñ—Ä—É–µ–º
            const encrypted = await PGP.encrypt(fileContent, ara);

	    if(!encrypted) throw new Error(`Wrong encrypted`);

	    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç file
	    var file = new File(
	        [header + encrypted], // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	        fileName + '.pgp',  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
	        { type: 'application/pgp-encrypted' } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MIME-—Ç–∏–ø
	    );
	} else {
	    // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ file.zip –±–µ–∑ PGP
	    var file = new File([zipBlob], fileName, { type: zipBlob.type || "application/zip" });
	}

	var o = await UPLOAD.save( file ); // –∑–∞–ª–∏–ª–∏ –Ω–∞ IPFS
	console.log('o=',o);

	UPLOAD.upfiles = []; // —Å–±—Ä–æ—Å–∏–ª–∏ –º–∞—Å—Å–∏–≤
	clean('upload'); // —É–±—Ä–∞–ª–∏ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ —Ñ–∞–π–ª–æ–≤


        UPLOAD.AddMy(o.Hash); // –¥–æ–±–∞–≤–∏–ª–∏ –∫ —Å–≤–æ–∏–º —Ñ–∞–π–ª–∞–º —Å–≤–µ–∂–µ–Ω—å–∫–∏–π
	await UPLOAD.relist(); // –ø–µ—Ä–µ–≥—Ä—É–∑–∏–ª–∏ –Ω–∞—à—É –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É
	UPLOAD.showhash(o.Hash); // –ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∑–µ–ª–µ–Ω–µ–Ω—å–∫–∏–º

	// –†–∞–∑–æ—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	const hash = IPFS.cid2hex(o.Hash);
	for(var acc_id of UPLOAD.friends) {
	    console.log('Mail to:',acc_id,hash);
	    if(! await PINGER.save(acc_id,hash) ) throw new Error(`PINGER error!`);
	}

	setTimeout(function(){ PINGER.www_check() },800);

    } catch(er) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', er); }

  },




save: function(file,opt){

    const formData = new FormData();
    formData.append('file', file); // 'file' ‚Äî –∏–º—è –ø–æ–ª—è, –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–º
    return new Promise(function(resolve, reject) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	fetch(IPFS.endpointSave, { method: 'POST', body: formData })
        .then((response) => {
            if(!response.ok) throw new Error('Network response was not ok ' + response.statusText);
            resolve(response.json()); // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON
        })
        .then((data) => {
            console.log('File uploaded successfully:', data);
	    resolve(data);
        })
        .catch((error) => {
            console.error('Error uploading file:', error);
	    reject(error);
        });
    });
},

  win: function(friends,opt) {

	// TODO: –ø–æ–∫–∞ —Ç–∞–∫, –¥–æ–±–∞–≤–∏–º –Ω–∞—à–∏ –∫–ª—é—á–∏
	// FAKE.setme();

	ohelpc('upload','Write nerw message',`
	<style>
	    .filezone { border-radius: 8px; background-color: #f5f5f5; width: 350px; height: 50px; display: flex; align-items: center; justify-content: center; opacity: 0.8; }
	    .fileactive { background-color: #f5fff5 !important; opacity: 1.0 !important; }
    .textareaw {
      align-self: stretch;
      border-radius: 8px;
      border: 1px solid #356bff;
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      justify-content: flex-start;
      max-width: 100%;
	width: 350px;
      min-height: 40px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
      overflow: hidden;  /* –°–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª */
    }

    .fn {
	margin-top:3px;
	font-size: 12px;
	display: flex;
	align-items: center;
	gap: 5px;
    }

    .fn_namea {
	padding: 1px 10px 1px 10px;
	border: 1px solid #ccc;
	background-color: #eee;
	border-radius: 15px;

	display: flex;
	align-items: center;
	gap: 6px;

	padding: 1px 10px 1px 10px;
    }


    .fn_name {
	display: inline-block;
	font-size: 12px;
    }

    .typeicon {
	display: inline-block;
	padding: -5px 10px -5px 5px;
	font-size: 18px;
	margin: -5px 0 -5px 0;
    }

    .delme {
	display: inline-block;
	font-size: 8px;
    }

    .replytext {
	padding: 5px;
	background-color: #fffbd8;
	border: 1px solid #ccc;
	border-radius: 10px;
	width: 350px;
    }

	</style>

	<!-- address to -->
	<div id='freindZone'></div>
	<input type='button' name="add_recipients" value="Add recipients" />
	<br>&nbsp;

	${!opt?.REPLY ?'': `
	<div class='br replytext'>${h(G6.MES[opt.REPLY].TEXT)}</div><br>&nbsp;`
	}
	<div><textarea class='textareaw' placeholder='text message'></textarea></div>

	<div class='filezone'>
            <img class="mv" src="img/download_2.svg" />
        </div>

        <div><input name="zone" style='display:none' type="file" accept="*/*" multiple /></div>

	<div class="fileplace"></div>



        <p><div><input type='button' name="save" style='display:none' value="Save" /></div>
	`);

/*
	<!-- address to -->

<p><table width='100%' border='0' style='font-size:10px'>
    <tr><th>Recepients:</th><th>Signature:</th></tr>
    <tr>
        <td width='50%'>
`+Object.keys(EXAMPLE_PUBLIC).map(name => `<div><label><input type='checkbox' ramsave='recipient_${h(name)}' style='margin-right:10px;'>${h(name)}</label></div>`).join('')+`
	</td>

	<td>
`+Object.keys(EXAMPLE_PUBLIC).map(name => `<div><label><input type='checkbox' ramsave='signature_${h(name)}' style='margin-right:10px;'>${h(name)}</label></div>`).join('')+`
	</td>
    </tr>
</table>

*/

        // –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π EXAMPLE_PUBLIC
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –≤ select

	const dropZone = dom('upload').querySelector(".filezone");
	const inputZone = dom('upload').querySelector("input[name='zone']");
	const inputSave = dom('upload').querySelector("input[name='save']");
	const textArea = dom('upload').querySelector("textarea");
	// const filePlace = dom('upload').querySelector(".fileplace");

	if(!friends || typeof friends !== 'object') {
	    // –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	    try { friends=JSON.parse(f5_read('last_friends','')); } catch(er){ friends=[]; }
	}
	UPLOAD.friends=[];
	for(var friend_id of friends) G6.www_Friends(friend_id,'add');

	dom('upload').querySelector("input[name='add_recipients']").addEventListener('click', async (event) => {
	    var o = `<div><b>Friend's acounts:</b></div>`;
		// var duble = {}; // for(var x in DOT.accs) duble[x.acc]=1; // —Å–≤–æ–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
		if(!UPLOAD.all_keys) UPLOAD.all_keys = await G6.read_CHAIN_ALL();
		for(var acc_id in UPLOAD.all_keys) {
    		    o += `<div class='mv0' onclick="G6.www_Friends('${acc_id}');clean('friendList');">` + await G6.www_acc({ acc: acc_id }) +`</div>`;
		}
	    ohelpc('friendList','Select recipients',o);
	});


	textArea.addEventListener('input', (event) => {
	    inputSave.style.display = (textArea.value == '' ? 'none' : 'block');
	    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
	    textArea.style.height = 'auto';
	    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –≤—ã—Å–æ—Ç—ã
    	    textArea.style.height = Math.min(textArea.scrollHeight, 300) + 'px';

	    if(textArea.value) {
		const file = new File([textArea.value], UPLOAD.textname, { type: "text/plain" });
		UPLOAD.file_add([file]);
	    } else UPLOAD.file_del(UPLOAD.textname);
        });

	// –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
        inputZone.addEventListener('change', (event) => {
	    dropZone.classList.add('fileactive');
	    UPLOAD.file_add( event.target.files );
        });

	// –°–æ–±—ã—Ç–∏–µ dragover: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        dropZone.addEventListener('dragover', (event) => {
	    event.preventDefault(); // –ù–µ –¥–∞—ë—Ç –±—Ä–∞—É–∑–µ—Ä—É –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            dropZone.classList.add('fileactive');
        });

	// –°–æ–±—ã—Ç–∏–µ dragleave: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å
        dropZone.addEventListener('dragleave', () => {
	    event.preventDefault();
	    dropZone.classList.remove('fileactive');
	});

	// –°–æ–±—ã—Ç–∏–µ drop: –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
        dropZone.addEventListener('drop', (event) => {
	    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
	    dropZone.classList.add('fileactive');

	    const files = event.dataTransfer.files;
	    if(files.length > 0) {
    		console.log('Dropped files:', files);
		UPLOAD.file_add(files);
	    } else {
    		console.warn('No files were dropped!');
	    }
	});

        dropZone.addEventListener('click', (event) => {
	    inputZone.click();
	});

	inputSave.addEventListener('click', (event) => {
	    if(!UPLOAD.friends.length) return salert("Add recipients!",1000);
	    f5_save('last_friends',JSON.stringify(UPLOAD.friends));

	//    UPLOAD.recipients = [];
	//    UPLOAD.signatures = [];
	//    dom('upload').querySelectorAll("input[type='checkbox']").forEach(e=>{
	//	if(e.checked) {
	//	    const name = e.closest('label').textContent.trim();
	//	    if(e.getAttribute('ramsave').indexOf('recipient_')==0) UPLOAD.recipients.push(name);
	//	    else UPLOAD.signatures.push(name);
	//	}
	//    });
	    // dier( UPLOAD.recipients );
	    // dier( UPLOAD.signatures );
	    UPLOAD.file_ready();
	});

  },


  file_add: function(files) {

	    if(files) Array.from(files).forEach(file => {
	        const i = UPLOAD.upfiles.findIndex(f => f.name === file.name);
	        if(i < 0) UPLOAD.upfiles.push(file); else UPLOAD.upfiles[i] = file;
    	    });

	    dom('upload').querySelector(".fileplace").innerHTML = UPLOAD.upfiles.map(x => `<div class='fn'>
<div class='delme mv0' onclick="UPLOAD.file_del('${x.name}')">&#10060;</div>
<div class='fn_namea'>
    <div alt='${h(x.type)}' class='typeicon'>${IPFS.typece(x.type)}</div>
    <div class='fn_name'>${x.name}</div>
</div>
${x.size}
</div>`).join('');

	    dom('upload').querySelector("input[name='save']").style.display = (UPLOAD.upfiles.length ? 'block' : 'none');
  },

  file_del: function(name) {
	if(name === UPLOAD.textname) dom('upload').querySelector("textarea").value=''; // –∏–±–æ –Ω–µ—Ö—É–π! –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—É—Ç–∏ –¥–ª—è.
	UPLOAD.upfiles = UPLOAD.upfiles.filter(f => f.name !== name);
	UPLOAD.file_add(false);
  },

  upfiles: [], // –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–∞–π–ª—ã
  textname: "message.txt", // —Ç–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–æ—Ä–º–æ—á–∫–∏

};



